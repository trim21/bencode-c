name: ci

on:
  pull_request:
  workflow_dispatch:
  push:
    branches:
      - master
    tags-ignore:
      - "*"

concurrency:
  group: '${{ github.workflow }}-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  build-test:
    name: "${{ matrix.os }} ${{ matrix.python-version }} gil:${{ !matrix.no-gil }}"
    strategy:
      max-parallel: 5
      fail-fast: false
      matrix:
        python-version:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13-dev" # dead snakes
        no-gil: [true, false]
        os: ["macos-12", "macos-13", "macos-14", "windows-latest", "ubuntu-latest"]
        exclude:
          - {python-version: '3.8', no-gil: true}
          - {python-version: '3.9', no-gil: true}
          - {python-version: '3.10', no-gil: true}
          - {python-version: '3.11', no-gil: true}
          - {python-version: '3.12', no-gil: true}
          - {os: macos-14, python-version: '3.8'}
          - {os: macos-14, python-version: '3.9'}
          - {os: macos-14, python-version: '3.8'}
          - {os: macos-12, python-version: '3.13-dev'}
          - {os: macos-13, python-version: '3.13-dev'}
          - {os: macos-14, python-version: '3.13-dev'}
          - {os: windows-latest, python-version: '3.13-dev'}

    runs-on: "${{ matrix.os }}"

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        if: ${{ !endsWith(matrix.python-version, '-dev') }}
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - uses: deadsnakes/action@v3.1.0
        if: ${{ endsWith(matrix.python-version, '-dev') }}
        with:
          python-version: ${{ matrix.python-version }}
          nogil: ${{ matrix.no-gil }}

      - run: python -m pip install -U pip
      - run: pip install -e .
      - run: pip install -r requirements.txt

      - run: pytest -sv

  build:
    uses: ./.github/workflows/_wheels.yaml

  test:
    needs: [build]
    name: "${{ matrix.os }} ${{ matrix.python-version }} gil:${{ !matrix.no-gil }}"
    strategy:
      max-parallel: 5
      fail-fast: false
      matrix:
        python-version:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13-dev" # dead snakes
        no-gil: [true, false]
        os: ["macos-12", "macos-13", "macos-14", "windows-latest", "ubuntu-latest"]
        exclude:
          - {python-version: '3.8', no-gil: true}
          - {python-version: '3.9', no-gil: true}
          - {python-version: '3.10', no-gil: true}
          - {python-version: '3.11', no-gil: true}
          - {python-version: '3.12', no-gil: true}
          - {os: macos-14, python-version: '3.8'}
          - {os: macos-14, python-version: '3.9'}
          - {os: macos-12, python-version: '3.13-dev'}
          - {os: macos-13, python-version: '3.13-dev'}
          - {os: macos-14, python-version: '3.13-dev'}
          - {os: windows-latest, python-version: '3.13-dev'}

    runs-on: "${{ matrix.os }}"

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4.1.7
        with:
          name: wheel
          path: dist
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        if: ${{ !endsWith(matrix.python-version, '-dev') }}
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - uses: deadsnakes/action@v3.1.0
        if: ${{ endsWith(matrix.python-version, '-dev') }}
        with:
          python-version: ${{ matrix.python-version }}
          nogil: ${{ matrix.no-gil }}

      - run: python -m pip install -U pip
      - run: pip install bencode-c --no-index --find-link ./dist/
      - run: pip install -r requirements.txt

      - run: pytest -sv

  check_dist:
    name: Check dist
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: wheel
          path: dist

      - run: pipx run twine check --strict dist/*

  audit:
    name: Audit
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: pip
          cache-dependency-path: 'requirements.txt'

      - run: pip install -r requirements.txt

      - uses: actions/download-artifact@v4
        with:
          name: wheel
          path: dist

      - run: abi3audit --verbose dist/*.whl
